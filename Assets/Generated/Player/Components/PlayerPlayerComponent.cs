//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PlayerContext {

    public PlayerEntity playerEntity { get { return GetGroup(PlayerMatcher.Player).GetSingleEntity(); } }
    public Game.Component.PlayerComponent player { get { return playerEntity.player; } }
    public bool hasPlayer { get { return playerEntity != null; } }

    public PlayerEntity SetPlayer(Game.Enums.InputBtn newInputBtn, UnityEngine.Transform newPlayer) {
        if (hasPlayer) {
            throw new Entitas.EntitasException("Could not set Player!\n" + this + " already has an entity with Game.Component.PlayerComponent!",
                "You should check if the context already has a playerEntity before setting it or use context.ReplacePlayer().");
        }
        var entity = CreateEntity();
        entity.AddPlayer(newInputBtn, newPlayer);
        return entity;
    }

    public void ReplacePlayer(Game.Enums.InputBtn newInputBtn, UnityEngine.Transform newPlayer) {
        var entity = playerEntity;
        if (entity == null) {
            entity = SetPlayer(newInputBtn, newPlayer);
        } else {
            entity.ReplacePlayer(newInputBtn, newPlayer);
        }
    }

    public void RemovePlayer() {
        playerEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class PlayerEntity {

    public Game.Component.PlayerComponent player { get { return (Game.Component.PlayerComponent)GetComponent(PlayerComponentsLookup.Player); } }
    public bool hasPlayer { get { return HasComponent(PlayerComponentsLookup.Player); } }

    public void AddPlayer(Game.Enums.InputBtn newInputBtn, UnityEngine.Transform newPlayer) {
        var index = PlayerComponentsLookup.Player;
        var component = (Game.Component.PlayerComponent)CreateComponent(index, typeof(Game.Component.PlayerComponent));
        component.inputBtn = newInputBtn;
        component.player = newPlayer;
        AddComponent(index, component);
    }

    public void ReplacePlayer(Game.Enums.InputBtn newInputBtn, UnityEngine.Transform newPlayer) {
        var index = PlayerComponentsLookup.Player;
        var component = (Game.Component.PlayerComponent)CreateComponent(index, typeof(Game.Component.PlayerComponent));
        component.inputBtn = newInputBtn;
        component.player = newPlayer;
        ReplaceComponent(index, component);
    }

    public void RemovePlayer() {
        RemoveComponent(PlayerComponentsLookup.Player);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class PlayerMatcher {

    static Entitas.IMatcher<PlayerEntity> _matcherPlayer;

    public static Entitas.IMatcher<PlayerEntity> Player {
        get {
            if (_matcherPlayer == null) {
                var matcher = (Entitas.Matcher<PlayerEntity>)Entitas.Matcher<PlayerEntity>.AllOf(PlayerComponentsLookup.Player);
                matcher.componentNames = PlayerComponentsLookup.componentNames;
                _matcherPlayer = matcher;
            }

            return _matcherPlayer;
        }
    }
}
